// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v4.24.2
// source: api.proto

package rpc_api

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// QuestionClient is the client API for Question service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionClient interface {
	GetById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc_go.CallOption) (*QuestionGetByIdResp, common.ErrorWithAttachment)
}

type questionClient struct {
	cc *triple.TripleConn
}

type QuestionClientImpl struct {
	GetById func(ctx context.Context, in *QuestionGetByIdReq) (*QuestionGetByIdResp, error)
}

func (c *QuestionClientImpl) GetDubboStub(cc *triple.TripleConn) QuestionClient {
	return NewQuestionClient(cc)
}

func (c *QuestionClientImpl) XXX_InterfaceName() string {
	return "rpc_api.Question"
}

func NewQuestionClient(cc *triple.TripleConn) QuestionClient {
	return &questionClient{cc}
}

func (c *questionClient) GetById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc_go.CallOption) (*QuestionGetByIdResp, common.ErrorWithAttachment) {
	out := new(QuestionGetByIdResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetById", in, out)
}

// QuestionServer is the server API for Question service.
// All implementations must embed UnimplementedQuestionServer
// for forward compatibility
type QuestionServer interface {
	GetById(context.Context, *QuestionGetByIdReq) (*QuestionGetByIdResp, error)
	mustEmbedUnimplementedQuestionServer()
}

// UnimplementedQuestionServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedQuestionServer) GetById(context.Context, *QuestionGetByIdReq) (*QuestionGetByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (s *UnimplementedQuestionServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedQuestionServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedQuestionServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &Question_ServiceDesc
}
func (s *UnimplementedQuestionServer) XXX_InterfaceName() string {
	return "rpc_api.Question"
}

func (UnimplementedQuestionServer) mustEmbedUnimplementedQuestionServer() {}

// UnsafeQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServer will
// result in compilation errors.
type UnsafeQuestionServer interface {
	mustEmbedUnimplementedQuestionServer()
}

func RegisterQuestionServer(s grpc_go.ServiceRegistrar, srv QuestionServer) {
	s.RegisterService(&Question_ServiceDesc, srv)
}

func _Question_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionGetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetById", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// Question_ServiceDesc is the grpc_go.ServiceDesc for Question service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var Question_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "rpc_api.Question",
	HandlerType: (*QuestionServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _Question_GetById_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}

// QuestionSubmitClient is the client API for QuestionSubmit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionSubmitClient interface {
	GetById(ctx context.Context, in *QuestionSubmitGetByIdReq, opts ...grpc_go.CallOption) (*QuestionSubmitGetByIdResp, common.ErrorWithAttachment)
	UpdateById(ctx context.Context, in *QuestionSubmitGetByIdResp, opts ...grpc_go.CallOption) (*QuestionSubmitUpdateByIdResp, common.ErrorWithAttachment)
}

type questionSubmitClient struct {
	cc *triple.TripleConn
}

type QuestionSubmitClientImpl struct {
	GetById    func(ctx context.Context, in *QuestionSubmitGetByIdReq) (*QuestionSubmitGetByIdResp, error)
	UpdateById func(ctx context.Context, in *QuestionSubmitGetByIdResp) (*QuestionSubmitUpdateByIdResp, error)
}

func (c *QuestionSubmitClientImpl) GetDubboStub(cc *triple.TripleConn) QuestionSubmitClient {
	return NewQuestionSubmitClient(cc)
}

func (c *QuestionSubmitClientImpl) XXX_InterfaceName() string {
	return "rpc_api.QuestionSubmit"
}

func NewQuestionSubmitClient(cc *triple.TripleConn) QuestionSubmitClient {
	return &questionSubmitClient{cc}
}

func (c *questionSubmitClient) GetById(ctx context.Context, in *QuestionSubmitGetByIdReq, opts ...grpc_go.CallOption) (*QuestionSubmitGetByIdResp, common.ErrorWithAttachment) {
	out := new(QuestionSubmitGetByIdResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetById", in, out)
}

func (c *questionSubmitClient) UpdateById(ctx context.Context, in *QuestionSubmitGetByIdResp, opts ...grpc_go.CallOption) (*QuestionSubmitUpdateByIdResp, common.ErrorWithAttachment) {
	out := new(QuestionSubmitUpdateByIdResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UpdateById", in, out)
}

// QuestionSubmitServer is the server API for QuestionSubmit service.
// All implementations must embed UnimplementedQuestionSubmitServer
// for forward compatibility
type QuestionSubmitServer interface {
	GetById(context.Context, *QuestionSubmitGetByIdReq) (*QuestionSubmitGetByIdResp, error)
	UpdateById(context.Context, *QuestionSubmitGetByIdResp) (*QuestionSubmitUpdateByIdResp, error)
	mustEmbedUnimplementedQuestionSubmitServer()
}

// UnimplementedQuestionSubmitServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionSubmitServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedQuestionSubmitServer) GetById(context.Context, *QuestionSubmitGetByIdReq) (*QuestionSubmitGetByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedQuestionSubmitServer) UpdateById(context.Context, *QuestionSubmitGetByIdResp) (*QuestionSubmitUpdateByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateById not implemented")
}
func (s *UnimplementedQuestionSubmitServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedQuestionSubmitServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedQuestionSubmitServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &QuestionSubmit_ServiceDesc
}
func (s *UnimplementedQuestionSubmitServer) XXX_InterfaceName() string {
	return "rpc_api.QuestionSubmit"
}

func (UnimplementedQuestionSubmitServer) mustEmbedUnimplementedQuestionSubmitServer() {}

// UnsafeQuestionSubmitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionSubmitServer will
// result in compilation errors.
type UnsafeQuestionSubmitServer interface {
	mustEmbedUnimplementedQuestionSubmitServer()
}

func RegisterQuestionSubmitServer(s grpc_go.ServiceRegistrar, srv QuestionSubmitServer) {
	s.RegisterService(&QuestionSubmit_ServiceDesc, srv)
}

func _QuestionSubmit_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitGetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetById", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionSubmit_UpdateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitGetByIdResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UpdateById", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionSubmit_ServiceDesc is the grpc_go.ServiceDesc for QuestionSubmit service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionSubmit_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "rpc_api.QuestionSubmit",
	HandlerType: (*QuestionSubmitServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _QuestionSubmit_GetById_Handler,
		},
		{
			MethodName: "UpdateById",
			Handler:    _QuestionSubmit_UpdateById_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}
